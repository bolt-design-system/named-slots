{"version":3,"sources":["index.min.js"],"names":["global","factory","exports","module","define","amd","skatejsNamedSlots","this","__commonjs","fn","eachChildNode","node","func","chs","childNodes","chsLen","length","a","ret","eachNodeOrFragmentNodes","DocumentFragment","getPropertyDescriptor","obj","key","hasLookupFunctions","Node","div","getter","__lookupGetter__","setter","__lookupSetter__","_descriptor","configurable","enumerable","get","set","value","descriptor","Object","getOwnPropertyDescriptor","getEscapedTextContent","textNode","textContent","replace","getCommentNodeOuterHtml","commentNode","parse","html","tree","document","createElement","canPatchNativeAccessors","__innerHTML","parsed","parser","parseFromString","body","firstChild","hasChildNodes","removeChild","appendChild","importNode","staticProp","name","defineProperty","arrayItem","idx","makeLikeNodeList","arr","item","getNodeType","isHostNode","isSlotNode","isRootNode","hostToRootMap","tagName","defaultShadowRootTagNameUc","findClosest","parentNode","getSlotNameFromSlot","getAttribute","getSlotNameFromNode","slotNodeIntoSlot","slot","insertBefore","nodeType","trim","assignedNodes","getAssignedNodes","shouldGoIntoContentMode","slotInsertBeforeIndex","indexOf","nodeToSlotMap","forEach","call","__removeChild","__insertBefore","splice","__appendChild","push","____triggerSlotChangeEvent","slotNodeFromSlot","assignedSlot","index","shouldGoIntoDefaultMode","indexOfNode","host","registerNode","eachNode","eachIndex","nodeToParentNodeMap","arrProto","unregisterNode","addNodeToNode","addNodeToHost","rootNode","slotNodes","rootToSlotMap","slotNode","addNodeToRoot","root","addSlotToRoot","querySelectorAll","slotNodesLen","addNodeToSlot","isInDefaultMode","removeNodeFromSlot","slotName","rootToHostMap","removeNodeFromNode","removeNodeFromHost","removeNodeFromRoot","removeSlotFromRoot","nodes","getRootNode","appendChildOrInsertBefore","newNode","refNode","nativeParentNode","Element","prototype","index$1","now","Date","getTime","require$$0","wait","immediate","later","last","timestamp","timeout","setTimeout","result","apply","context","args","arguments","callNow","debounce","version","WeakMap","window","Wm","delete","has","val","writable","Array","defaultShadowRootTagName","toUpperCase","polyfillAtRuntime","doNotOverridePropertiesInTextNodes","assignedToSlotMap","hostToModeMap","nodeToChildNodesMap","DOMParser","members","____assignedNodes","______assignedNodes","____isInFallbackMode","____slotChangeListeners","______slotChangeListeners","dispatchEvent","CustomEvent","bubbles","cancelable","addEventListener","opts","__addEventListener","attachShadow","_this","mode","Error","existingShadowRoot","lightNodes","slice","shadowRoot","polyfillShadowRootTagName","childElementCount","children","__childNodes","firstElementChild","assigned","innerHTML","getHtmlNodeOuterHtml","outerHTML","getOuterHtmlByNodeType",1,3,8,"getOuterHtml","lastChild","ch","lastElementChild","setAttribute","nextSibling","child","nextElementSibling","found","undefined","toLowerCase","attributes","map","attr","join","parentElement","previousSibling","previousElementSibling","removeEventListener","__removeEventListener","replaceChild","COMMENT_NODE","createTextNode","elementProto","HTMLElement","textProto","Text","keys","memberName","memberProperty","hasOwnProperty","nativeDescriptor","nativeTextDescriptor","shouldOverrideInTextNode","api","freeze","default","previousGlobal","noConflict"],"mappings":"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","file":"index.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.skatejsNamedSlots = factory());\n}(this, function () {\n\n    function __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports), module.exports; }\n\n    function eachChildNode(node, func) {\n      if (!node) {\n        return;\n      }\n\n      var chs = node.childNodes;\n      var chsLen = chs.length;\n      for (var a = 0; a < chsLen; a++) {\n        var ret = func(chs[a], a, chs);\n        if (typeof ret !== 'undefined') {\n          return ret;\n        }\n      }\n    }\n\n    function eachNodeOrFragmentNodes(node, func) {\n      if (node instanceof DocumentFragment) {\n        var chs = node.childNodes;\n        var chsLen = chs.length;\n        for (var a = 0; a < chsLen; a++) {\n          func(chs[a], a);\n        }\n      } else {\n        func(node, 0);\n      }\n    }\n\n    var div = document.createElement('div');\n    var hasLookupFunctions = !!div.__lookupGetter__;\n\n    function getPropertyDescriptor (obj, key) {\n      if (hasLookupFunctions) {\n        if (obj instanceof Node) {\n          obj = div;\n        }\n\n        var getter = obj.__lookupGetter__(key);\n        var setter = obj.__lookupSetter__(key);\n        var _descriptor = {\n          configurable: true,\n          enumerable: true\n        };\n\n        if (getter) {\n          _descriptor.get = getter;\n          _descriptor.set = setter;\n          return _descriptor;\n        } else if (typeof obj[key] === 'function') {\n          _descriptor.value = obj[key];\n          return _descriptor;\n        }\n      }\n\n      var descriptor = Object.getOwnPropertyDescriptor(obj, key);\n      if (descriptor && descriptor.get) {\n        return descriptor;\n      }\n    }\n\n    var nativeParentNode = getPropertyDescriptor(Element.prototype, 'innerHTML');\n\n    var canPatchNativeAccessors = !!nativeParentNode;\n\n    var index$1 = __commonjs(function (module) {\n    module.exports = Date.now || now;\n\n    function now() {\n        return new Date().getTime();\n    }\n    });\n\n    var require$$0 = (index$1 && typeof index$1 === 'object' && 'default' in index$1 ? index$1['default'] : index$1);\n\n    var index = __commonjs(function (module) {\n    /**\n     * Module dependencies.\n     */\n\n    var now = require$$0;\n\n    /**\n     * Returns a function, that, as long as it continues to be invoked, will not\n     * be triggered. The function will be called after it stops being called for\n     * N milliseconds. If `immediate` is passed, trigger the function on the\n     * leading edge, instead of the trailing.\n     *\n     * @source underscore.js\n     * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n     * @param {Function} function to wrap\n     * @param {Number} timeout in ms (`100`)\n     * @param {Boolean} whether to execute at the beginning (`false`)\n     * @api public\n     */\n\n    module.exports = function debounce(func, wait, immediate) {\n      var timeout, args, context, timestamp, result;\n      if (null == wait) wait = 100;\n\n      function later() {\n        var last = now() - timestamp;\n\n        if (last < wait && last > 0) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) {\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n          }\n        }\n      };\n\n      return function debounced() {\n        context = this;\n        args = arguments;\n        timestamp = now();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n          result = func.apply(context, args);\n          context = args = null;\n        }\n\n        return result;\n      };\n    };\n    });\n\n    var debounce = (index && typeof index === 'object' && 'default' in index ? index['default'] : index);\n\n    /**\n     * See https://w3c.github.io/DOM-Parsing/#serializing\n     * @param {TextNode}\n     * @returns {string}\n     */\n    function getEscapedTextContent(textNode) {\n      return textNode.textContent.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n    }\n\n    /**\n     * @returns {string}\n     * @param {commentNode}\n     */\n    function getCommentNodeOuterHtml(commentNode) {\n      return \"<!--\" + commentNode.textContent + \"-->\";\n    }\n\n    var version = '0.0.1';\n\n    var WeakMap = window.WeakMap || function () {\n      var index = 0;\n      function Wm() {\n        this.key = '____weak_map_' + index++;\n      }\n      Wm.prototype = {\n        delete: function _delete(obj) {\n          if (obj) {\n            delete obj[this.key];\n          }\n        },\n        get: function get(obj) {\n          return obj ? obj[this.key] : null;\n        },\n        has: function has(obj) {\n          return obj ? typeof obj[this.key] !== 'undefined' : false;\n        },\n        set: function set(obj, val) {\n          if (obj) {\n            var key = this.key;\n            if (typeof obj[key] === 'undefined') {\n              Object.defineProperty(obj, key, {\n                configurable: true,\n                enumerable: false,\n                writable: true,\n                value: val\n              });\n            } else {\n              obj[key] = val;\n            }\n          }\n        }\n      };\n      return Wm;\n    }();\n\n    var arrProto = Array.prototype;\n    var forEach = arrProto.forEach;\n\n    // We use a real DOM node for a shadow root. This is because the host node\n    // basically becomes a virtual entry point for your element leaving the shadow\n    // root the only thing that can receive instructions on how the host should\n    // render to the browser.\n\n    var defaultShadowRootTagName = '_shadow_root_';\n    var defaultShadowRootTagNameUc = defaultShadowRootTagName.toUpperCase();\n\n    // * WebKit only *\n    //\n    // These members we need cannot override as we require native access to their\n    // original values at some point.\n    var polyfillAtRuntime = ['childNodes', 'parentNode'];\n\n    // Some properties that should not be overridden in the Text prototype.\n    var doNotOverridePropertiesInTextNodes = ['textContent'];\n\n    // Private data stores.\n    var assignedToSlotMap = new WeakMap();\n    var hostToModeMap = new WeakMap();\n    var hostToRootMap = new WeakMap();\n    var nodeToChildNodesMap = new WeakMap();\n    var nodeToParentNodeMap = new WeakMap();\n    var nodeToSlotMap = new WeakMap();\n    var rootToHostMap = new WeakMap();\n    var rootToSlotMap = new WeakMap();\n\n    // Unfortunately manual DOM parsing is because of WebKit.\n    var parser = new DOMParser();\n    function parse(html) {\n      var tree = document.createElement('div');\n\n      // Everything not WebKit can do this easily.\n      if (canPatchNativeAccessors) {\n        tree.__innerHTML = html;\n        return tree;\n      }\n\n      var parsed = parser.parseFromString('<div>' + html + '</div>', 'text/html').body.firstChild;\n\n      while (parsed.hasChildNodes()) {\n        var firstChild = parsed.firstChild;\n        parsed.removeChild(firstChild);\n        tree.appendChild(firstChild);\n      }\n\n      // Need to import the node to initialise the custom elements from the parser.\n      return document.importNode(tree, true);\n    }\n\n    function staticProp(obj, name, value) {\n      Object.defineProperty(obj, name, {\n        configurable: true,\n        get: function get() {\n          return value;\n        }\n      });\n    }\n\n    // Slotting helpers.\n\n    function arrayItem(idx) {\n      return this[idx];\n    }\n\n    function makeLikeNodeList(arr) {\n      arr.item = arrayItem;\n      return arr;\n    }\n\n    function getNodeType(node) {\n      if (isHostNode(node)) {\n        return 'host';\n      }\n\n      if (isSlotNode(node)) {\n        return 'slot';\n      }\n\n      if (isRootNode(node)) {\n        return 'root';\n      }\n\n      return 'node';\n    }\n\n    function isHostNode(node) {\n      return !!hostToRootMap.get(node);\n    }\n\n    function isSlotNode(node) {\n      return node.tagName === 'SLOT';\n    }\n\n    function isRootNode(node) {\n      return node.tagName === defaultShadowRootTagNameUc;\n    }\n\n    function findClosest(node, func) {\n      while (node) {\n        if (node === document) {\n          break;\n        }\n        if (func(node)) {\n          return node;\n        }\n        node = node.parentNode;\n      }\n    }\n\n    function getSlotNameFromSlot(node) {\n      return node.getAttribute && node.getAttribute('name') || 'default';\n    }\n\n    function getSlotNameFromNode(node) {\n      return node.getAttribute && node.getAttribute('slot') || 'default';\n    }\n\n    function slotNodeIntoSlot(slot, node, insertBefore) {\n      // Don't slot nodes that have content but are only whitespace. This is an\n      // anomaly that I don't think the spec deals with.\n      //\n      // The problem is:\n      //\n      // - If you insert HTML with indentation into the page, there will be\n      //   whitespace and if that's inserted it messes with fallback content\n      //   calculation where there is formatting, but no meaningful content, so in\n      //   theory it should fallback. Since you can attach a shadow root after we\n      //   mean to insert an empty text node and have it \"count\", we can't really\n      //   discard nodes that are considered formatting at the time of attachment.\n      // - You can insert a text node and modify its text content later.\n      //   Incremental DOM seems to do this. Every way I look at it, it seems\n      //   problematic that we should have to screen for content, but I don't seems\n      //   much of a way around it at the moment.\n      if (node.nodeType === 3 && node.textContent && node.textContent.trim().length === 0) {\n        return;\n      }\n\n      var assignedNodes = slot.getAssignedNodes();\n      var shouldGoIntoContentMode = assignedNodes.length === 0;\n      var slotInsertBeforeIndex = assignedNodes.indexOf(insertBefore);\n\n      // Assign the slot to the node internally.\n      nodeToSlotMap.set(node, slot);\n\n      // Remove the fallback content and state if we're going into content mode.\n      if (shouldGoIntoContentMode) {\n        forEach.call(slot.childNodes, function (node) {\n          return slot.__removeChild(node);\n        });\n      }\n\n      if (slotInsertBeforeIndex > -1) {\n        slot.__insertBefore(node, insertBefore);\n        assignedNodes.splice(slotInsertBeforeIndex, 0, node);\n      } else {\n        slot.__appendChild(node);\n        assignedNodes.push(node);\n      }\n\n      slot.____triggerSlotChangeEvent();\n    }\n\n    function slotNodeFromSlot(node) {\n      var slot = node.assignedSlot;\n\n      if (slot) {\n        var assignedNodes = slot.getAssignedNodes();\n        var index = assignedNodes.indexOf(node);\n\n        if (index > -1) {\n          var shouldGoIntoDefaultMode = assignedNodes.length === 1;\n\n          assignedNodes.splice(index, 1);\n          nodeToSlotMap.set(node, null);\n\n          // Actually remove the child.\n          slot.__removeChild(node);\n\n          // If this was the last slotted node, then insert fallback content.\n          if (shouldGoIntoDefaultMode) {\n            forEach.call(slot.childNodes, function (node) {\n              return slot.__appendChild(node);\n            });\n          }\n\n          slot.____triggerSlotChangeEvent();\n        }\n      }\n    }\n\n    // Returns the index of the node in the host's childNodes.\n    function indexOfNode(host, node) {\n      var chs = host.childNodes;\n      var chsLen = chs.length;\n      for (var a = 0; a < chsLen; a++) {\n        if (chs[a] === node) {\n          return a;\n        }\n      }\n      return -1;\n    }\n\n    // Adds the node to the list of childNodes on the host and fakes any necessary\n    // information such as parentNode.\n    function registerNode(host, node, insertBefore, func) {\n      var index = indexOfNode(host, insertBefore);\n      eachNodeOrFragmentNodes(node, function (eachNode, eachIndex) {\n        func(eachNode, eachIndex);\n\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(eachNode, host);\n        } else {\n          staticProp(eachNode, 'parentNode', host);\n        }\n\n        if (index > -1) {\n          arrProto.splice.call(host.childNodes, index + eachIndex, 0, eachNode);\n        } else {\n          arrProto.push.call(host.childNodes, eachNode);\n        }\n      });\n    }\n\n    // Cleans up registerNode().\n    function unregisterNode(host, node, func) {\n      var index = indexOfNode(host, node);\n\n      if (index > -1) {\n        func(node, 0);\n\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(node, null);\n        } else {\n          staticProp(node, 'parentNode', null);\n        }\n\n        arrProto.splice.call(host.childNodes, index, 1);\n      }\n    }\n\n    function addNodeToNode(host, node, insertBefore) {\n      registerNode(host, node, insertBefore, function (eachNode) {\n        host.__insertBefore(eachNode, insertBefore);\n      });\n    }\n\n    function addNodeToHost(host, node, insertBefore) {\n      registerNode(host, node, insertBefore, function (eachNode) {\n        var rootNode = hostToRootMap.get(host);\n        var slotNodes = rootToSlotMap.get(rootNode);\n        var slotNode = slotNodes[getSlotNameFromNode(eachNode)];\n        if (slotNode) {\n          slotNodeIntoSlot(slotNode, eachNode, insertBefore);\n        }\n      });\n    }\n\n    function addNodeToRoot(root, node, insertBefore) {\n      eachNodeOrFragmentNodes(node, function (node) {\n        if (isSlotNode(node)) {\n          addSlotToRoot(root, node);\n        } else {\n          var slotNodes = node.querySelectorAll && node.querySelectorAll('slot');\n          if (slotNodes) {\n            var slotNodesLen = slotNodes.length;\n            for (var a = 0; a < slotNodesLen; a++) {\n              addSlotToRoot(root, slotNodes[a]);\n            }\n          }\n        }\n      });\n      addNodeToNode(root, node, insertBefore);\n    }\n\n    // Adds a node to a slot. In other words, adds default content to a slot. It\n    // ensures that if the slot doesn't have any assigned nodes yet, that the node\n    // is actually displayed, otherwise it's just registered as child content.\n    function addNodeToSlot(slot, node, insertBefore) {\n      var isInDefaultMode = slot.getAssignedNodes().length === 0;\n      registerNode(slot, node, insertBefore, function (eachNode) {\n        if (isInDefaultMode) {\n          slot.__insertBefore(eachNode, insertBefore);\n        }\n      });\n    }\n\n    // Removes a node from a slot (default content). It ensures that if the slot\n    // doesn't have any assigned nodes yet, that the node is actually removed,\n    // otherwise it's just unregistered.\n    function removeNodeFromSlot(slot, node) {\n      var isInDefaultMode = slot.getAssignedNodes().length === 0;\n      unregisterNode(slot, node, function () {\n        if (isInDefaultMode) {\n          slot.__removeChild(node);\n        }\n      });\n    }\n\n    function addSlotToRoot(root, slot) {\n      var slotName = getSlotNameFromSlot(slot);\n\n      // Ensure a slot node's childNodes are overridden at the earliest point\n      // possible for WebKit.\n      if (!canPatchNativeAccessors && !slot.childNodes.push) {\n        staticProp(slot, 'childNodes', []);\n      }\n\n      rootToSlotMap.get(root)[slotName] = slot;\n      eachChildNode(rootToHostMap.get(root), function (eachNode) {\n        if (!eachNode.assignedSlot && slotName === getSlotNameFromNode(eachNode)) {\n          slotNodeIntoSlot(slot, eachNode);\n        }\n      });\n    }\n\n    function removeNodeFromNode(host, node) {\n      unregisterNode(host, node, function () {\n        host.__removeChild(node);\n      });\n    }\n\n    function removeNodeFromHost(host, node) {\n      unregisterNode(host, node, function () {\n        slotNodeFromSlot(node);\n      });\n    }\n\n    function removeNodeFromRoot(root, node) {\n      unregisterNode(root, node, function () {\n        if (isSlotNode(node)) {\n          removeSlotFromRoot(root, node);\n        } else {\n          var nodes = node.querySelectorAll && node.querySelectorAll('slot');\n          for (var a = 0; a < nodes.length; a++) {\n            removeSlotFromRoot(root, nodes[a]);\n          }\n        }\n      });\n    }\n\n    function removeSlotFromRoot(root, node) {\n      node.getAssignedNodes().forEach(slotNodeFromSlot);\n      delete rootToSlotMap.get(root)[getSlotNameFromSlot(node)];\n    }\n\n    // TODO terribly inefficient\n    function getRootNode(host) {\n      if (isRootNode(host)) {\n        return host;\n      } else {\n        if (!host.parentNode) {\n          return;\n        }\n\n        return getRootNode(host.parentNode);\n      }\n    }\n\n    function appendChildOrInsertBefore(host, newNode, refNode) {\n      var nodeType = getNodeType(host);\n      var parentNode = newNode.parentNode;\n      var rootNode = getRootNode(host);\n\n      // Ensure childNodes is patched so we can manually update it for WebKit.\n      if (!canPatchNativeAccessors && !host.childNodes.push) {\n        staticProp(host, 'childNodes', []);\n      }\n\n      if (rootNode && getNodeType(newNode) === 'slot') {\n        addSlotToRoot(rootNode, newNode);\n      }\n\n      // If we append a child to a host, the host tells the shadow root to distribute\n      // it. If the root decides it doesn't need to be distributed, it is never\n      // removed from the old parent because in polyfill land we store a reference\n      // to the node but we don't move it. Due to that, we must explicitly remove the\n      // node from its old parent.\n      if (parentNode && getNodeType(parentNode) === 'host') {\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(newNode, null);\n        } else {\n          staticProp(newNode, 'parentNode', null);\n        }\n      }\n\n      if (nodeType === 'node') {\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(newNode, host);\n          return host.__insertBefore(newNode, refNode);\n        } else {\n          return addNodeToNode(host, newNode, refNode);\n        }\n      }\n\n      if (nodeType === 'slot') {\n        return addNodeToSlot(host, newNode, refNode);\n      }\n\n      if (nodeType === 'host') {\n        return addNodeToHost(host, newNode, refNode);\n      }\n\n      if (nodeType === 'root') {\n        return addNodeToRoot(host, newNode, refNode);\n      }\n    }\n\n    var members = {\n      // For testing purposes.\n      ____assignedNodes: {\n        get: function get() {\n          return this.______assignedNodes || (this.______assignedNodes = []);\n        }\n      },\n\n      // For testing purposes.\n      ____isInFallbackMode: {\n        get: function get() {\n          return this.getAssignedNodes().length === 0;\n        }\n      },\n\n      ____slotChangeListeners: {\n        get: function get() {\n          if (typeof this.______slotChangeListeners === 'undefined') {\n            this.______slotChangeListeners = 0;\n          }\n          return this.______slotChangeListeners;\n        },\n        set: function set(value) {\n          this.______slotChangeListeners = value;\n        }\n      },\n      ____triggerSlotChangeEvent: {\n        value: debounce(function () {\n          if (this.____slotChangeListeners) {\n            this.dispatchEvent(new CustomEvent('slotchange', {\n              bubbles: false,\n              cancelable: false\n            }));\n          }\n        })\n      },\n      addEventListener: {\n        value: function value(name, func, opts) {\n          if (name === 'slotchange' && isSlotNode(this)) {\n            this.____slotChangeListeners++;\n          }\n          return this.__addEventListener(name, func, opts);\n        }\n      },\n      appendChild: {\n        value: function value(newNode) {\n          return appendChildOrInsertBefore(this, newNode);\n        }\n      },\n      assignedSlot: {\n        get: function get() {\n          return nodeToSlotMap.get(this) || null;\n        }\n      },\n      attachShadow: {\n        value: function value(opts) {\n          var _this = this;\n\n          var mode = opts && opts.mode;\n          if (mode !== 'closed' && mode !== 'open') {\n            throw new Error('You must specify { mode } as \"open\" or \"closed\" to attachShadow().');\n          }\n\n          // Return the existing shadow root if it exists.\n          var existingShadowRoot = hostToRootMap.get(this);\n          if (existingShadowRoot) {\n            return existingShadowRoot;\n          }\n\n          var lightNodes = makeLikeNodeList([].slice.call(this.childNodes));\n          var shadowRoot = document.createElement(opts.polyfillShadowRootTagName || defaultShadowRootTagName);\n\n          // Host and shadow root data.\n          hostToModeMap.set(this, mode);\n          hostToRootMap.set(this, shadowRoot);\n          rootToHostMap.set(shadowRoot, this);\n          rootToSlotMap.set(shadowRoot, {});\n\n          if (canPatchNativeAccessors) {\n            nodeToChildNodesMap.set(this, lightNodes);\n          } else {\n            staticProp(this, 'childNodes', lightNodes);\n          }\n\n          // Process light DOM.\n          lightNodes.forEach(function (node) {\n            // Existing children should be removed from being displayed, but still\n            // appear to be child nodes. This is how light DOM works; they're still\n            // child nodes but not in the composed DOM yet as there won't be any\n            // slots for them to go into.\n            _this.__removeChild(node);\n\n            // We must register the parentNode here as this has the potential to\n            // become out of sync if the node is moved before being slotted.\n            if (canPatchNativeAccessors) {\n              nodeToParentNodeMap.set(node, _this);\n            } else {\n              staticProp(node, 'parentNode', _this);\n            }\n          });\n\n          // The shadow root is actually the only child of the host.\n          return this.__appendChild(shadowRoot);\n        }\n      },\n      childElementCount: {\n        get: function get() {\n          return this.children.length;\n        }\n      },\n      childNodes: {\n        get: function get() {\n          if (canPatchNativeAccessors && getNodeType(this) === 'node') {\n            return this.__childNodes;\n          }\n          var childNodes = nodeToChildNodesMap.get(this);\n          childNodes || nodeToChildNodesMap.set(this, childNodes = makeLikeNodeList([]));\n          return childNodes;\n        }\n      },\n      children: {\n        get: function get() {\n          var chs = [];\n          eachChildNode(this, function (node) {\n            if (node.nodeType === 1) {\n              chs.push(node);\n            }\n          });\n          return makeLikeNodeList(chs);\n        }\n      },\n      firstChild: {\n        get: function get() {\n          return this.childNodes[0] || null;\n        }\n      },\n      firstElementChild: {\n        get: function get() {\n          return this.children[0] || null;\n        }\n      },\n      getAssignedNodes: {\n        value: function value() {\n          if (isSlotNode(this)) {\n            var assigned = assignedToSlotMap.get(this);\n            assigned || assignedToSlotMap.set(this, assigned = []);\n            return assigned;\n          }\n        }\n      },\n      hasChildNodes: {\n        value: function value() {\n          return this.childNodes.length > 0;\n        }\n      },\n      innerHTML: {\n        get: function get() {\n          var innerHTML = '';\n\n          var getHtmlNodeOuterHtml = function getHtmlNodeOuterHtml(node) {\n            return node.outerHTML;\n          };\n          var getOuterHtmlByNodeType = {\n            1: getHtmlNodeOuterHtml,\n            3: getEscapedTextContent,\n            8: getCommentNodeOuterHtml\n          };\n\n          eachChildNode(this, function (node) {\n            var getOuterHtml = getOuterHtmlByNodeType[node.nodeType] || getHtmlNodeOuterHtml;\n            innerHTML += getOuterHtml(node);\n          });\n          return innerHTML;\n        },\n        set: function set(innerHTML) {\n          var parsed = parse(innerHTML);\n\n          while (this.hasChildNodes()) {\n            this.removeChild(this.firstChild);\n          }\n\n          while (parsed.hasChildNodes()) {\n            var firstChild = parsed.firstChild;\n\n            // When we polyfill everything on HTMLElement.prototype, we overwrite\n            // properties. This makes it so that parentNode reports null even though\n            // it's actually a parent of the HTML parser. For this reason,\n            // cleanNode() won't work and we must manually remove it from the\n            // parser before it is moved to the host just in case it's added as a\n            // light node but not assigned to a slot.\n            parsed.removeChild(firstChild);\n\n            this.appendChild(firstChild);\n          }\n        }\n      },\n      insertBefore: {\n        value: function value(newNode, refNode) {\n          return appendChildOrInsertBefore(this, newNode, refNode);\n        }\n      },\n      lastChild: {\n        get: function get() {\n          var ch = this.childNodes;\n          return ch[ch.length - 1] || null;\n        }\n      },\n      lastElementChild: {\n        get: function get() {\n          var ch = this.children;\n          return ch[ch.length - 1] || null;\n        }\n      },\n      name: {\n        get: function get() {\n          return this.getAttribute('name');\n        },\n        set: function set(name) {\n          return this.setAttribute('name', name);\n        }\n      },\n      nextSibling: {\n        get: function get() {\n          var host = this;\n          return eachChildNode(this.parentNode, function (child, index, nodes) {\n            if (host === child) {\n              return nodes[index + 1] || null;\n            }\n          });\n        }\n      },\n      nextElementSibling: {\n        get: function get() {\n          var host = this;\n          var found = undefined;\n          return eachChildNode(this.parentNode, function (child) {\n            if (found && child.nodeType === 1) {\n              return child;\n            }\n            if (host === child) {\n              found = true;\n            }\n          });\n        }\n      },\n      outerHTML: {\n        get: function get() {\n          var name = this.tagName.toLowerCase();\n          var attributes = Array.prototype.slice.call(this.attributes).map(function (attr) {\n            return ' ' + attr.name + (attr.value ? '=\"' + attr.value + '\"' : '');\n          }).join('');\n          return '<' + name + attributes + '>' + this.innerHTML + '</' + name + '>';\n        }\n      },\n      parentElement: {\n        get: function get() {\n          return findClosest(this.parentNode, function (node) {\n            return node.nodeType === 1;\n          });\n        }\n      },\n      parentNode: {\n        get: function get() {\n          return nodeToParentNodeMap.get(this) || null;\n        }\n      },\n      previousSibling: {\n        get: function get() {\n          var host = this;\n          return eachChildNode(this.parentNode, function (child, index, nodes) {\n            if (host === child) {\n              return nodes[index - 1] || null;\n            }\n          });\n        }\n      },\n      previousElementSibling: {\n        get: function get() {\n          var host = this;\n          var found = undefined;\n          return eachChildNode(this.parentNode, function (child) {\n            if (found && host === child) {\n              return found;\n            }\n            if (child.nodeType === 1) {\n              found = child;\n            }\n          });\n        }\n      },\n      removeChild: {\n        value: function value(refNode) {\n          var nodeType = getNodeType(this);\n\n          if (nodeType === 'node') {\n            if (canPatchNativeAccessors) {\n              return this.__removeChild(refNode);\n            } else {\n              return removeNodeFromNode(this, refNode);\n            }\n          }\n\n          if (nodeType === 'slot') {\n            return removeNodeFromSlot(this, refNode);\n          }\n\n          if (nodeType === 'host') {\n            return removeNodeFromHost(this, refNode);\n          }\n\n          if (nodeType === 'root') {\n            return removeNodeFromRoot(this, refNode);\n          }\n        }\n      },\n      removeEventListener: {\n        value: function value(name, func, opts) {\n          if (name === 'slotchange' && this.____slotChangeListeners && isSlotNode(this)) {\n            this.____slotChangeListeners--;\n          }\n          return this.__removeEventListener(name, func, opts);\n        }\n      },\n      replaceChild: {\n        value: function value(newNode, refNode) {\n          this.insertBefore(newNode, refNode);\n          return this.removeChild(refNode);\n        }\n      },\n      shadowRoot: {\n        get: function get() {\n          return hostToModeMap.get(this) === 'open' ? hostToRootMap.get(this) : null;\n        }\n      },\n      textContent: {\n        get: function get() {\n          var textContent = '';\n          eachChildNode(this, function (node) {\n            if (node.nodeType !== Node.COMMENT_NODE) {\n              textContent += node.textContent;\n            }\n          });\n          return textContent;\n        },\n        set: function set(textContent) {\n          while (this.hasChildNodes()) {\n            this.removeChild(this.firstChild);\n          }\n          if (!textContent) {\n            return;\n          }\n          this.appendChild(document.createTextNode(textContent));\n        }\n      }\n    };\n\n    if (!('attachShadow' in document.createElement('div'))) {\n      (function () {\n        var elementProto = HTMLElement.prototype;\n        var textProto = Text.prototype;\n        var textNode = document.createTextNode('');\n\n        Object.keys(members).forEach(function (memberName) {\n          var memberProperty = members[memberName];\n\n          // All properties should be configurable.\n          memberProperty.configurable = true;\n\n          // Applying to the data properties only since we can't have writable accessor properties.\n          if (memberProperty.hasOwnProperty('value')) {\n            memberProperty.writable = true;\n          }\n\n          // Polyfill as much as we can and work around WebKit in other areas.\n          if (canPatchNativeAccessors || polyfillAtRuntime.indexOf(memberName) === -1) {\n            var nativeDescriptor = getPropertyDescriptor(elementProto, memberName);\n            var nativeTextDescriptor = getPropertyDescriptor(textProto, memberName);\n            var shouldOverrideInTextNode = memberName in textNode && doNotOverridePropertiesInTextNodes.indexOf(memberName) === -1;\n\n            Object.defineProperty(elementProto, memberName, memberProperty);\n\n            if (nativeDescriptor) {\n              Object.defineProperty(elementProto, '__' + memberName, nativeDescriptor);\n            }\n\n            if (shouldOverrideInTextNode) {\n              Object.defineProperty(textProto, memberName, memberProperty);\n            }\n\n            if (shouldOverrideInTextNode && nativeTextDescriptor) {\n              Object.defineProperty(textProto, '__' + memberName, nativeDescriptor);\n            }\n          }\n        });\n      })();\n    }\n\n\n\n    var api = Object.freeze({\n      default: version\n    });\n\n    var previousGlobal = window.skatejsNamedSlots;\n    version.noConflict = function noConflict() {\n      window.skatejsNamedSlots = previousGlobal;\n      return this;\n    };\n    window.skatejsNamedSlots = version;\n    for (var name in api) {\n      version[name] = api[name];\n    }\n    version.version = '0.1.8';\n\n    return version;\n\n}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":"/source/"}