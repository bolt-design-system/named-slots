{"version":3,"sources":["index.min.js"],"names":["global","factory","exports","module","define","amd","skatejsNamedSlots","this","applyParentNode","node","parent","prop","configurable","get","removeParentNode","arrayItem","idx","doForNodesIfSlot","elem","func","nodeToArray","forEach","slot","getSlot","name","getAttribute","__slots","slots","querySelector","__shadowId","makeLikeNodeList","arr","item","DocumentFragment","toArray","childNodes","obj","Array","prototype","slice","call","polyfill","mapPolyfilled","props","funcs","set","polyfilled","createFragmentFromChildNodes","frag","document","createDocumentFragment","hasChildNodes","appendChild","firstChild","createShadowRoot","root","createElement","isBlockLevel","window","getComputedStyle","display","render","fn","opts","arguments","length","undefined","defaults","shadowRoot","__shadowRoot","initialLightDom","shadowId","WeakMap","Object","defineProperty","bind","childElementCount","children","nodes","childNodesLen","a","push","filter","nodeType","firstElementChild","innerHTML","map","outerHTML","textContent","join","val","div","lastChild","ch","lastElementChild","tagName","toLowerCase","attributes","attr","value","toString","newNode","insertBefore","refNode","removeChild","replaceChild","version","api","freeze","default","previousGlobal","noConflict"],"mappings":"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","file":"index.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.skatejsNamedSlots = factory());\n}(this, function () {\n\n  var mapPolyfilled = new WeakMap();\n\n  var prop = Object.defineProperty.bind(Object);\n\n  // Helpers.\n\n  function applyParentNode(node, parent) {\n    prop(node, 'parentNode', {\n      configurable: true,\n      get: function get() {\n        return parent;\n      }\n    });\n  }\n\n  function removeParentNode(node) {\n    prop(node, 'parentNode', {\n      configurable: true,\n      get: function get() {\n        return null;\n      }\n    });\n  }\n\n  function arrayItem(idx) {\n    return this[idx];\n  }\n\n  function doForNodesIfSlot(elem, node, func) {\n    nodeToArray(node).forEach(function (node) {\n      var slot = getSlot(elem, node);\n      if (slot) {\n        func(elem, node, slot);\n      }\n    });\n  }\n\n  function getSlot(elem, node) {\n    if (!node) {\n      return;\n    }\n\n    var name = node.getAttribute && node.getAttribute('slot') || 'content';\n\n    if (!elem.__slots) {\n      elem.__slots = {};\n    }\n\n    var slots = elem.__slots;\n\n    if (typeof slots[name] === 'undefined') {\n      var slot = elem.querySelector('[slot-name=\"' + elem.__shadowId + (name === 'content' ? '' : name) + '\"]');\n      if (slot) {\n        slots[name] = slot;\n      }\n    }\n\n    if (slots[name]) {\n      return slots[name];\n    }\n  }\n\n  function makeLikeNodeList(arr) {\n    arr.item = arrayItem;\n    return arr;\n  }\n\n  function nodeToArray(node) {\n    return node instanceof DocumentFragment ? toArray(node.childNodes) : [node];\n  }\n\n  function toArray(obj) {\n    return Array.prototype.slice.call(obj);\n  }\n\n  // Prop overrides.\n\n  var props = {\n    childElementCount: {\n      get: function get() {\n        return this.children.length;\n      }\n    },\n    childNodes: {\n      get: function get() {\n        var nodes = [];\n        var slots = this.__slots;\n        if (slots) {\n          for (var name in slots) {\n            var slot = slots[name];\n            var childNodes = slot.childNodes;\n            var childNodesLen = childNodes.length;\n            for (var a = 0; a < childNodesLen; a++) {\n              nodes.push(childNodes[a]);\n            }\n          }\n        }\n        return makeLikeNodeList(nodes);\n      }\n    },\n    children: {\n      get: function get() {\n        return makeLikeNodeList(this.childNodes.filter(function (node) {\n          return node.nodeType === 1;\n        }));\n      }\n    },\n    firstChild: {\n      get: function get() {\n        return this.childNodes[0] || null;\n      }\n    },\n    firstElementChild: {\n      get: function get() {\n        return this.children[0] || null;\n      }\n    },\n    innerHTML: {\n      get: function get() {\n        return this.childNodes.map(function (node) {\n          return node.outerHTML || node.textContent;\n        }).join('');\n      },\n      set: function set(val) {\n        var div = document.createElement('div');\n        var frag = document.createDocumentFragment();\n        div.innerHTML = val;\n        while (div.hasChildNodes()) {\n          frag.appendChild(div.firstChild);\n        }\n        this.appendChild(frag);\n      }\n    },\n    lastChild: {\n      get: function get() {\n        var ch = this.childNodes;\n        return ch[ch.length - 1] || null;\n      }\n    },\n    lastElementChild: {\n      get: function get() {\n        var ch = this.children;\n        return ch[ch.length - 1] || null;\n      }\n    },\n    outerHTML: {\n      get: function get() {\n        var name = this.tagName.toLowerCase();\n        var attributes = toArray(this.attributes).map(function (attr) {\n          return ' ' + attr.name + (attr.value ? '=\"' + attr.value + '\"' : '');\n        }).join('');\n        return '<' + name + attributes + '>' + this.innerHTML + '</' + name + '>';\n      }\n    },\n    textContent: {\n      get: function get() {\n        return this.childNodes.map(function (node) {\n          return node.textContent;\n        }).join('');\n      },\n      set: function set(val) {\n        doForNodesIfSlot(this, val.toString(), function (elem, node, slot) {\n          slot.textContent = node;\n        });\n      }\n    }\n  };\n\n  // Method overrides.\n\n  var funcs = {\n    appendChild: function appendChild(newNode) {\n      doForNodesIfSlot(this, newNode, function (elem, node, slot) {\n        slot.appendChild(node);\n        applyParentNode(node, elem);\n      });\n      return newNode;\n    },\n    hasChildNodes: function hasChildNodes() {\n      return this.childNodes.length > 0;\n    },\n    insertBefore: function insertBefore(newNode, refNode) {\n      doForNodesIfSlot(this, newNode, function (elem, node, slot) {\n        slot.insertBefore(node, refNode);\n        applyParentNode(node, elem);\n      });\n      return newNode;\n    },\n    removeChild: function removeChild(refNode) {\n      doForNodesIfSlot(this, refNode, function (elem, node, slot) {\n        slot.removeChild(node);\n        removeParentNode(node);\n      });\n      return refNode;\n    },\n    replaceChild: function replaceChild(newNode, refNode) {\n      doForNodesIfSlot(this, newNode, function (elem, node, slot) {\n        slot.replaceChild(node, refNode);\n        applyParentNode(node, elem);\n      });\n      removeParentNode(refNode);\n      return refNode;\n    }\n  };\n\n  // Polyfills an element.\n  function polyfill (elem) {\n    if (mapPolyfilled.get(elem)) {\n      return;\n    }\n\n    // Polyfill properties.\n    for (var name in props) {\n      prop(elem, name, props[name]);\n    }\n\n    // Polyfill methods.\n    for (var name in funcs) {\n      elem[name] = funcs[name];\n    }\n\n    mapPolyfilled.set(elem, true);\n    return elem;\n  }\n\n  // Returns whether or not the specified element has been polyfilled.\n  function polyfilled (elem) {\n    return mapPolyfilled.get(elem);\n  }\n\n  // Returns a document fragment of the childNodes of the specified element. Due\n  // to the nature of the DOM, this will remove the nodes from the element.\n  function createFragmentFromChildNodes(elem) {\n    var frag = document.createDocumentFragment();\n    while (elem.hasChildNodes()) {\n      frag.appendChild(elem.firstChild);\n    }\n    return frag;\n  }\n\n  // Creates an shadow root, appends it to the element and returns it.\n  function createShadowRoot(elem) {\n    var root = document.createElement(isBlockLevel(elem) ? 'div' : 'span');\n    elem.appendChild(root);\n    return root;\n  }\n\n  // Returns whether or not the specified element is a block level element or not\n  // We need this to determine the type of element the shadow root should be\n  // since we must use real nodes to simulate a shadow root.\n  function isBlockLevel(elem) {\n    return window.getComputedStyle(elem).display === 'block';\n  }\n\n  // Simple renderer that proxies another renderer. It will polyfill if not yet\n  // polyfilled, or simply run the renderer. Initial content is taken into\n  // consideration.\n  var defaults = { shadowId: '' };\n  function render (fn) {\n    var opts = arguments.length <= 1 || arguments[1] === undefined ? defaults : arguments[1];\n\n    return function (elem) {\n      var shadowRoot = elem.__shadowRoot;\n\n      if (shadowRoot) {\n        fn(elem, shadowRoot);\n      } else {\n        // We get a fragment of the initial DOM so that we can create the shadow\n        // root.\n        var initialLightDom = createFragmentFromChildNodes(elem);\n\n        // Create a shadow ID so that it can be used to get a slot that is unique\n        // to this shadow root. Since we don't polyfill querySelector() et al, we\n        // need a way to be able to refer to slots that are unique to this\n        // shadow root.\n        elem.__shadowId = opts.shadowId;\n\n        // Create the shadow root and return the light DOM. We must get the light\n        // DOM before we template it so that we can distribute it after\n        // polyfilling.\n        elem.__shadowRoot = createShadowRoot(elem);\n\n        // Render once we have the initial light DOM as this would likely blow\n        // that away.\n        fn(elem, elem.__shadowRoot);\n\n        // Now polyfill so that we can distribute after.\n        polyfill(elem);\n\n        // Distribute the initial light DOM after polyfill so they get put into\n        // the right spots.\n        elem.appendChild(initialLightDom);\n      }\n    };\n  }\n\n  var version = '0.0.1';\n\n\n\n  var api = Object.freeze({\n  \tdefault: polyfill,\n  \tpolyfilled: polyfilled,\n  \trender: render,\n  \tversion: version\n  });\n\n  var previousGlobal = window.skatejsNamedSlots;\n  polyfill.noConflict = function noConflict() {\n    window.skatejsNamedSlots = previousGlobal;\n    return this;\n  };\n  window.skatejsNamedSlots = polyfill;\n  for (var name in api) {\n    polyfill[name] = api[name];\n  }\n\n  return polyfill;\n\n}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":"/source/"}