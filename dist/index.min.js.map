{"version":3,"sources":["index.min.js"],"names":["global","factory","exports","module","define","amd","skatejsNamedSlots","this","__commonjs","fn","eachChildNode","node","func","chs","childNodes","chsLen","length","a","ret","eachNodeOrFragmentNodes","DocumentFragment","convertXmlToHtml","nodeType","copy","document","createElement","tagName","attributes","attr","setAttribute","name","value","childNode","appendChild","parse","html","tree","parsed","parser","parseFromString","hasChildNodes","firstChild","removeChild","staticProp","obj","Object","defineProperty","configurable","get","arrayItem","idx","makeLikeNodeList","arr","item","getNodeType","isHostNode","isSlotNode","isRootNode","hostToRootMap","defaultShadowRootTagNameUc","findClosest","parentNode","getSlotNameFromSlot","getAttribute","getSlotNameFromNode","slotNodeIntoSlot","slot","insertBefore","assignedNodes","getAssignedNodes","slotInsertBeforeIndex","indexOf","nodeToSlotMap","set","slotToModeMap","slice","call","forEach","fallbackNode","__removeChild","shouldAffectSlot","__insertBefore","splice","__appendChild","push","____triggerSlotChangeEvent","slotNodeFromSlot","assignedSlot","index","indexOfNode","host","registerNode","eachNode","eachIndex","canPatchNativeAccessors","nodeToParentNodeMap","unregisterNode","addNodeToNode","addNodeToHost","rootNode","slotNodes","rootToSlotMap","slotNode","addNodeToRoot","root","addSlotToRoot","querySelectorAll","slotNodesLen","slotName","rootToHostMap","removeNodeFromNode","removeNodeFromHost","removeNodeFromRoot","removeSlotFromRoot","nodes","appendChildOrInsertBefore","newNode","refNode","findDescriptorFor","protos","ctor","window","proto","prototype","hasOwnProperty","getOwnPropertyDescriptor","Node","index$1","now","Date","getTime","require$$0","wait","immediate","later","last","timestamp","timeout","setTimeout","result","apply","context","args","arguments","callNow","debounce","version","WeakMap","Wm","key","delete","has","val","enumerable","defaultShadowRootTagName","toUpperCase","polyfilAtRuntime","assignedToSlotMap","hostToModeMap","nodeToChildNodesMap","DOMParser","members","____assignedNodes","______assignedNodes","____isInFallbackMode","____slotChangeListeners","______slotChangeListeners","dispatchEvent","CustomEvent","bubbles","cancelable","addEventListener","opts","__addEventListener","attachShadow","_this","mode","Error","existingShadowRoot","lightNodes","shadowRoot","polyfillShadowRootTagName","childElementCount","children","__childNodes","firstElementChild","assigned","innerHTML","outerHTML","textContent","lastChild","ch","lastElementChild","nextSibling","child","nextElementSibling","found","undefined","toLowerCase","Array","map","join","parentElement","__parentNode","previousSibling","previousElementSibling","removeEventListener","__removeEventListener","replaceChild","createTextNode","elementProto","HTMLElement","keys","memberName","memberProperty","nativeDescriptor","api","freeze","default","previousGlobal","noConflict"],"mappings":"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","file":"index.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.skatejsNamedSlots = factory());\n}(this, function () {\n\n    function __commonjs(fn, module) { return module = { exports: {} }, fn(module, module.exports), module.exports; }\n\n    function eachChildNode(node, func) {\n      if (!node) {\n        return;\n      }\n\n      var chs = node.childNodes;\n      var chsLen = chs.length;\n      for (var a = 0; a < chsLen; a++) {\n        var ret = func(chs[a], a, chs);\n        if (typeof ret !== 'undefined') {\n          return ret;\n        }\n      }\n    }\n\n    function eachNodeOrFragmentNodes(node, func) {\n      if (node instanceof DocumentFragment) {\n        var chs = node.childNodes;\n        var chsLen = chs.length;\n        for (var a = 0; a < chsLen; a++) {\n          func(chs[a], a);\n        }\n      } else {\n        func(node, 0);\n      }\n    }\n\n    // Any code referring to this is because it has to work around this bug in\n    // WebKit: https://bugs.webkit.org/show_bug.cgi?id=49739\n    var canPatchNativeAccessors = !!Object.getOwnPropertyDescriptor(window.Node.prototype, 'parentNode').get;\n\n    var index$1 = __commonjs(function (module) {\n    module.exports = Date.now || now;\n\n    function now() {\n        return new Date().getTime();\n    }\n    });\n\n    var require$$0 = (index$1 && typeof index$1 === 'object' && 'default' in index$1 ? index$1['default'] : index$1);\n\n    var index = __commonjs(function (module) {\n    /**\n     * Module dependencies.\n     */\n\n    var now = require$$0;\n\n    /**\n     * Returns a function, that, as long as it continues to be invoked, will not\n     * be triggered. The function will be called after it stops being called for\n     * N milliseconds. If `immediate` is passed, trigger the function on the\n     * leading edge, instead of the trailing.\n     *\n     * @source underscore.js\n     * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n     * @param {Function} function to wrap\n     * @param {Number} timeout in ms (`100`)\n     * @param {Boolean} whether to execute at the beginning (`false`)\n     * @api public\n     */\n\n    module.exports = function debounce(func, wait, immediate) {\n      var timeout, args, context, timestamp, result;\n      if (null == wait) wait = 100;\n\n      function later() {\n        var last = now() - timestamp;\n\n        if (last < wait && last > 0) {\n          timeout = setTimeout(later, wait - last);\n        } else {\n          timeout = null;\n          if (!immediate) {\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n          }\n        }\n      };\n\n      return function debounced() {\n        context = this;\n        args = arguments;\n        timestamp = now();\n        var callNow = immediate && !timeout;\n        if (!timeout) timeout = setTimeout(later, wait);\n        if (callNow) {\n          result = func.apply(context, args);\n          context = args = null;\n        }\n\n        return result;\n      };\n    };\n    });\n\n    var debounce = (index && typeof index === 'object' && 'default' in index ? index['default'] : index);\n\n    var version = '0.0.1';\n\n    var WeakMap = window.WeakMap || function () {\n      var index = 0;\n      function Wm() {\n        this.key = '____weak_map_' + index++;\n      }\n      Wm.prototype = {\n        delete: function _delete(obj) {\n          if (obj) {\n            delete obj[this.key];\n          }\n        },\n        get: function get(obj) {\n          return obj ? obj[this.key] : null;\n        },\n        has: function has(obj) {\n          return obj ? typeof obj[this.key] !== 'undefined' : false;\n        },\n        set: function set(obj, val) {\n          if (obj) {\n            var key = this.key;\n            if (typeof obj[key] === 'undefined') {\n              Object.defineProperty(obj, key, {\n                configurable: true,\n                enumerable: false,\n                value: val\n              });\n            } else {\n              obj[key] = val;\n            }\n          }\n        }\n      };\n      return Wm;\n    }();\n\n    // We use a real DOM node for a shadow root. This is because the host node\n    // basically becomes a virtual entry point for your element leaving the shadow\n    // root the only thing that can receive instructions on how the host should\n    // render to the browser.\n    var defaultShadowRootTagName = '_shadow_root_';\n    var defaultShadowRootTagNameUc = defaultShadowRootTagName.toUpperCase();\n\n    // * WebKit only *\n    //\n    // These members we need cannot override as we require native access to their\n    // original values at some point.\n    var polyfilAtRuntime = ['childNodes', 'parentNode'];\n\n    // These are the protos that we need to search for native descriptors on.\n    var protos = ['Node', 'Element', 'EventTarget'];\n\n    // Private data stores.\n    var assignedToSlotMap = new WeakMap();\n    var hostToModeMap = new WeakMap();\n    var hostToRootMap = new WeakMap();\n    var nodeToChildNodesMap = new WeakMap();\n    var nodeToParentNodeMap = new WeakMap();\n    var nodeToSlotMap = new WeakMap();\n    var rootToHostMap = new WeakMap();\n    var rootToSlotMap = new WeakMap();\n    var slotToModeMap = new WeakMap();\n\n    // * WebKit only *\n    //\n    // We require some way to parse HTML natively because we can't use the native\n    // accessors. To do this we parse as XML and conver each node in the tree to\n    // HTML nodes.\n    //\n    // This works because we polyfill at the HTMLElement level and XML nodes are\n    // considered Element nodes and we don't polyfill at that level.\n\n    var parser = new DOMParser();\n\n    function convertXmlToHtml(node) {\n      var nodeType = node.nodeType;\n\n      if (nodeType === 1) {\n        var copy = document.createElement(node.tagName);\n        for (var a = 0; a < node.attributes.length; a++) {\n          var attr = node.attributes[a];\n          copy.setAttribute(attr.name, attr.value);\n        }\n        for (var a = 0; a < node.childNodes.length; a++) {\n          var childNode = node.childNodes[a];\n          copy.appendChild(convertXmlToHtml(childNode));\n        }\n        return copy;\n      }\n      return node;\n    }\n\n    function parse(html) {\n      var tree = document.createElement('div');\n      var parsed = parser.parseFromString(html, 'text/xml');\n      while (parsed.hasChildNodes()) {\n        var firstChild = parsed.firstChild;\n        parsed.removeChild(firstChild);\n        tree.appendChild(convertXmlToHtml(firstChild));\n      }\n      return tree;\n    }\n\n    function staticProp(obj, name, value) {\n      Object.defineProperty(obj, name, {\n        configurable: true,\n        get: function get() {\n          return value;\n        }\n      });\n    }\n\n    // Slotting helpers.\n\n    function arrayItem(idx) {\n      return this[idx];\n    }\n\n    function makeLikeNodeList(arr) {\n      arr.item = arrayItem;\n      return arr;\n    }\n\n    function getNodeType(node) {\n      if (isHostNode(node)) {\n        return 'host';\n      }\n\n      if (isSlotNode(node)) {\n        return 'slot';\n      }\n\n      if (isRootNode(node)) {\n        return 'root';\n      }\n\n      return 'node';\n    }\n\n    function isHostNode(node) {\n      return !!hostToRootMap.get(node);\n    }\n\n    function isSlotNode(node) {\n      return node.tagName === 'SLOT';\n    }\n\n    function isRootNode(node) {\n      return node.tagName === defaultShadowRootTagNameUc;\n    }\n\n    function findClosest(node, func) {\n      while (node) {\n        if (node === document) {\n          break;\n        }\n        if (func(node)) {\n          return node;\n        }\n        node = node.parentNode;\n      }\n    }\n\n    function getSlotNameFromSlot(node) {\n      return node.getAttribute && node.getAttribute('name') || 'default';\n    }\n\n    function getSlotNameFromNode(node) {\n      return node.getAttribute && node.getAttribute('slot') || 'default';\n    }\n\n    function slotNodeIntoSlot(slot, node, insertBefore) {\n      var assignedNodes = slot.getAssignedNodes();\n      var slotInsertBeforeIndex = assignedNodes.indexOf(insertBefore);\n\n      nodeToSlotMap.set(node, slot);\n\n      // If there's currently no assigned nodes, there will be, so remove all fallback content.\n      if (!assignedNodes.length) {\n        slotToModeMap.set(slot, false);\n        [].slice.call(slot.childNodes).forEach(function (fallbackNode) {\n          return slot.__removeChild(fallbackNode);\n        });\n      }\n\n      var shouldAffectSlot = !slotToModeMap.get(slot);\n\n      if (slotInsertBeforeIndex > -1) {\n        if (shouldAffectSlot) {\n          slot.__insertBefore(node, insertBefore);\n        }\n\n        assignedNodes.splice(slotInsertBeforeIndex, 0, node);\n      } else {\n        if (shouldAffectSlot) {\n          slot.__appendChild(node);\n        }\n\n        assignedNodes.push(node);\n      }\n\n      slot.____triggerSlotChangeEvent();\n    }\n\n    function slotNodeFromSlot(node) {\n      var slot = node.assignedSlot;\n\n      if (slot) {\n        var assignedNodes = slot.getAssignedNodes();\n        var index = assignedNodes.indexOf(node);\n\n        if (index > -1) {\n          assignedNodes.splice(index, 1);\n          nodeToSlotMap.set(node, null);\n\n          var shouldAffectSlot = !slotToModeMap.get(slot);\n\n          // We only update the actual DOM representation if we're displaying\n          // slotted nodes.\n          if (shouldAffectSlot) {\n            slot.__removeChild(node);\n          }\n\n          // If this was the last slotted node, then insert fallback content.\n          if (!assignedNodes.length) {\n            slotToModeMap.set(slot, true);\n            eachChildNode(slot, function (node) {\n              slot.__appendChild(node);\n            });\n          }\n\n          slot.____triggerSlotChangeEvent();\n        }\n      }\n    }\n\n    function indexOfNode(host, node) {\n      var chs = host.childNodes;\n      var chsLen = chs.length;\n      for (var a = 0; a < chsLen; a++) {\n        if (chs[a] === node) {\n          return a;\n        }\n      }\n      return -1;\n    }\n\n    // Adds the node to the list of childNodes on the host and fakes any necessary\n    // information such as parentNode.\n    function registerNode(host, node, insertBefore, func) {\n      var index = indexOfNode(host, insertBefore);\n      eachNodeOrFragmentNodes(node, function (eachNode, eachIndex) {\n        func(eachNode, eachIndex);\n\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(eachNode, host);\n        } else {\n          staticProp(eachNode, 'parentNode', host);\n        }\n\n        if (index > -1) {\n          host.childNodes.splice(index + eachIndex, 0, eachNode);\n        } else {\n          host.childNodes.push(eachNode);\n        }\n      });\n    }\n\n    // Cleans up registerNode().\n    function unregisterNode(host, node, func) {\n      var index = indexOfNode(host, node);\n      if (index > -1) {\n        func(node, 0);\n\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(node, null);\n        } else {\n          staticProp(node, 'parentNode', null);\n        }\n\n        host.childNodes.splice(index, 1);\n      }\n    }\n\n    function addNodeToNode(host, node, insertBefore) {\n      registerNode(host, node, insertBefore, function (eachNode) {\n        host.__insertBefore(eachNode, insertBefore);\n      });\n    }\n\n    function addNodeToHost(host, node, insertBefore) {\n      registerNode(host, node, insertBefore, function (eachNode) {\n        var rootNode = hostToRootMap.get(host);\n        var slotNodes = rootToSlotMap.get(rootNode);\n        var slotNode = slotNodes[getSlotNameFromNode(eachNode)];\n        if (slotNode) {\n          slotNodeIntoSlot(slotNode, eachNode, insertBefore);\n        }\n      });\n    }\n\n    function addNodeToRoot(root, node, insertBefore) {\n      eachNodeOrFragmentNodes(node, function (node) {\n        if (isSlotNode(node)) {\n          addSlotToRoot(root, node);\n        } else {\n          var slotNodes = node.querySelectorAll && node.querySelectorAll('slot');\n          if (slotNodes) {\n            var slotNodesLen = slotNodes.length;\n            for (var a = 0; a < slotNodesLen; a++) {\n              addSlotToRoot(root, slotNodes[a]);\n            }\n          }\n        }\n      });\n      addNodeToNode(root, node, insertBefore);\n    }\n\n    function addSlotToRoot(root, node) {\n      var slotName = getSlotNameFromSlot(node);\n      slotToModeMap.set(node, true);\n      rootToSlotMap.get(root)[slotName] = node;\n      eachChildNode(rootToHostMap.get(root), function (eachNode) {\n        if (!eachNode.assignedSlot && slotName === getSlotNameFromNode(eachNode)) {\n          slotNodeIntoSlot(node, eachNode);\n        }\n      });\n    }\n\n    function removeNodeFromNode(host, node) {\n      unregisterNode(host, node, function () {\n        host.__removeChild(node);\n      });\n    }\n\n    function removeNodeFromHost(host, node) {\n      unregisterNode(host, node, function () {\n        slotNodeFromSlot(node);\n      });\n    }\n\n    function removeNodeFromRoot(root, node) {\n      unregisterNode(root, node, function () {\n        if (isSlotNode(node)) {\n          removeSlotFromRoot(root, node);\n        } else {\n          var nodes = node.querySelectorAll && node.querySelectorAll('slot');\n          for (var a = 0; a < nodes.length; a++) {\n            removeSlotFromRoot(root, nodes[a]);\n          }\n        }\n      });\n    }\n\n    function removeSlotFromRoot(root, node) {\n      node.getAssignedNodes().forEach(slotNodeFromSlot);\n      delete rootToSlotMap.get(root)[getSlotNameFromSlot(node)];\n    }\n\n    function appendChildOrInsertBefore(host, newNode, refNode) {\n      var nodeType = getNodeType(host);\n      var parentNode = newNode.parentNode;\n\n      if (!canPatchNativeAccessors && !host.childNodes.push) {\n        staticProp(host, 'childNodes', []);\n      }\n\n      // If we append a child to a host, the host tells the shadow root to distribute\n      // it. If the root decides it doesn't need to be distributed, it is never\n      // removed from the old parent because in polyfill land we store a reference\n      // to the node but we don't move it. Due to that, we must explicitly remove the\n      // node from its old parent.\n      if (parentNode && getNodeType(parentNode) === 'host') {\n        if (canPatchNativeAccessors) {\n          nodeToParentNodeMap.set(newNode, null);\n        } else {\n          staticProp(newNode, 'parentNode', null);\n        }\n      }\n\n      if (nodeType === 'node') {\n        if (canPatchNativeAccessors) {\n          return host.__insertBefore(newNode, refNode);\n        } else {\n          return addNodeToNode(host, newNode, refNode);\n        }\n      }\n\n      if (nodeType === 'slot') {\n        return addNodeToNode(host, newNode, refNode);\n      }\n\n      if (nodeType === 'host') {\n        return addNodeToHost(host, newNode, refNode);\n      }\n\n      if (nodeType === 'root') {\n        return addNodeToRoot(host, newNode, refNode);\n      }\n    }\n\n    var members = {\n      // For testing purposes.\n      ____assignedNodes: {\n        get: function get() {\n          return this.______assignedNodes || (this.______assignedNodes = []);\n        }\n      },\n\n      // For testing purposes.\n      ____isInFallbackMode: {\n        get: function get() {\n          return slotToModeMap.get(this);\n        }\n      },\n\n      ____slotChangeListeners: {\n        get: function get() {\n          if (typeof this.______slotChangeListeners === 'undefined') {\n            this.______slotChangeListeners = 0;\n          }\n          return this.______slotChangeListeners;\n        },\n        set: function set(value) {\n          this.______slotChangeListeners = value;\n        }\n      },\n      ____triggerSlotChangeEvent: {\n        value: debounce(function () {\n          if (this.____slotChangeListeners) {\n            this.dispatchEvent(new CustomEvent('slotchange', {\n              bubbles: false,\n              cancelable: false\n            }));\n          }\n        })\n      },\n      addEventListener: {\n        value: function value(name, func, opts) {\n          if (name === 'slotchange' && isSlotNode(this)) {\n            this.____slotChangeListeners++;\n          }\n          return this.__addEventListener(name, func, opts);\n        }\n      },\n      appendChild: {\n        value: function value(newNode) {\n          return appendChildOrInsertBefore(this, newNode);\n        }\n      },\n      assignedSlot: {\n        get: function get() {\n          return nodeToSlotMap.get(this) || null;\n        }\n      },\n      attachShadow: {\n        value: function value(opts) {\n          var _this = this;\n\n          var mode = opts && opts.mode;\n          if (mode !== 'closed' && mode !== 'open') {\n            throw new Error('You must specify { mode } as \"open\" or \"closed\" to attachShadow().');\n          }\n\n          // Return the existing shadow root if it exists.\n          var existingShadowRoot = hostToRootMap.get(this);\n          if (existingShadowRoot) {\n            return existingShadowRoot;\n          }\n\n          var lightNodes = makeLikeNodeList([].slice.call(this.childNodes));\n          var shadowRoot = document.createElement(opts.polyfillShadowRootTagName || defaultShadowRootTagName);\n\n          // Host and shadow root data.\n          hostToModeMap.set(this, mode);\n          hostToRootMap.set(this, shadowRoot);\n          rootToHostMap.set(shadowRoot, this);\n          rootToSlotMap.set(shadowRoot, {});\n\n          if (canPatchNativeAccessors) {\n            nodeToChildNodesMap.set(this, lightNodes);\n          } else {\n            staticProp(this, 'childNodes', lightNodes);\n          }\n\n          // Existing children should be removed from being displayed, but still\n          // appear to be child nodes. This is how light DOM works; they're still\n          // child nodes but not in the composed DOM yet as there won't be any\n          // slots for them to go into.\n          eachChildNode(this, function (node) {\n            return _this.__removeChild(node);\n          });\n\n          // The shadow root is actually the only child of the host.\n          return this.__appendChild(shadowRoot);\n        }\n      },\n      childElementCount: {\n        get: function get() {\n          return this.children.length;\n        }\n      },\n      childNodes: {\n        get: function get() {\n          if (canPatchNativeAccessors && getNodeType(this) === 'node') {\n            return this.__childNodes;\n          }\n          var childNodes = nodeToChildNodesMap.get(this);\n          childNodes || nodeToChildNodesMap.set(this, childNodes = makeLikeNodeList([]));\n          return childNodes;\n        }\n      },\n      children: {\n        get: function get() {\n          var chs = [];\n          eachChildNode(this, function (node) {\n            if (node.nodeType === 1) {\n              chs.push(node);\n            }\n          });\n          return makeLikeNodeList(chs);\n        }\n      },\n      firstChild: {\n        get: function get() {\n          return this.childNodes[0] || null;\n        }\n      },\n      firstElementChild: {\n        get: function get() {\n          return this.children[0] || null;\n        }\n      },\n      getAssignedNodes: {\n        value: function value() {\n          if (isSlotNode(this)) {\n            var assigned = assignedToSlotMap.get(this);\n            assigned || assignedToSlotMap.set(this, assigned = []);\n            return assigned;\n          }\n        }\n      },\n      hasChildNodes: {\n        value: function value() {\n          return this.childNodes.length > 0;\n        }\n      },\n      innerHTML: {\n        get: function get() {\n          var innerHTML = '';\n          eachChildNode(this, function (node) {\n            innerHTML += node.nodeType === 1 ? node.outerHTML : node.textContent;\n          });\n          return innerHTML;\n        },\n        set: function set(innerHTML) {\n          var parsed = parse(innerHTML);\n\n          while (this.hasChildNodes()) {\n            this.removeChild(this.firstChild);\n          }\n\n          while (parsed.hasChildNodes()) {\n            var firstChild = parsed.firstChild;\n\n            // When we polyfill everything on HTMLElement.prototype, we overwrite\n            // properties. This makes it so that parentNode reports null even though\n            // it's actually a parent of the HTML parser. For this reason,\n            // cleanNode() won't work and we must manually remove it from the\n            // parser before it is moved to the host just in case it's added as a\n            // light node but not assigned to a slot.\n            parsed.removeChild(firstChild);\n\n            this.appendChild(firstChild);\n          }\n        }\n      },\n      insertBefore: {\n        value: function value(newNode, refNode) {\n          return appendChildOrInsertBefore(this, newNode, refNode);\n        }\n      },\n      lastChild: {\n        get: function get() {\n          var ch = this.childNodes;\n          return ch[ch.length - 1] || null;\n        }\n      },\n      lastElementChild: {\n        get: function get() {\n          var ch = this.children;\n          return ch[ch.length - 1] || null;\n        }\n      },\n      name: {\n        get: function get() {\n          return this.getAttribute('name');\n        },\n        set: function set(name) {\n          return this.setAttribute('name', name);\n        }\n      },\n      nextSibling: {\n        get: function get() {\n          var host = this;\n          return eachChildNode(this.parentNode, function (child, index, nodes) {\n            if (host === child) {\n              return nodes[index + 1] || null;\n            }\n          });\n        }\n      },\n      nextElementSibling: {\n        get: function get() {\n          var host = this;\n          var found = undefined;\n          return eachChildNode(this.parentNode, function (child) {\n            if (found && child.nodeType === 1) {\n              return child;\n            }\n            if (host === child) {\n              found = true;\n            }\n          });\n        }\n      },\n      outerHTML: {\n        get: function get() {\n          var name = this.tagName.toLowerCase();\n          var attributes = Array.prototype.slice.call(this.attributes).map(function (attr) {\n            return ' ' + attr.name + (attr.value ? '=\"' + attr.value + '\"' : '');\n          }).join('');\n          return '<' + name + attributes + '>' + this.innerHTML + '</' + name + '>';\n        }\n      },\n      parentElement: {\n        get: function get() {\n          return findClosest(this.parentNode, function (node) {\n            return node.nodeType === 1;\n          });\n        }\n      },\n      parentNode: {\n        get: function get() {\n          return nodeToParentNodeMap.get(this) || this.__parentNode || null;\n        }\n      },\n      previousSibling: {\n        get: function get() {\n          var host = this;\n          return eachChildNode(this.parentNode, function (child, index, nodes) {\n            if (host === child) {\n              return nodes[index - 1] || null;\n            }\n          });\n        }\n      },\n      previousElementSibling: {\n        get: function get() {\n          var host = this;\n          var found = undefined;\n          return eachChildNode(this.parentNode, function (child) {\n            if (found && host === child) {\n              return found;\n            }\n            if (child.nodeType === 1) {\n              found = child;\n            }\n          });\n        }\n      },\n      removeChild: {\n        value: function value(refNode) {\n          var nodeType = getNodeType(this);\n\n          if (nodeType === 'node') {\n            if (canPatchNativeAccessors) {\n              return this.__removeChild(refNode);\n            } else {\n              return removeNodeFromNode(this, refNode);\n            }\n          }\n\n          if (nodeType === 'slot') {\n            return removeNodeFromNode(this, refNode);\n          }\n\n          if (nodeType === 'host') {\n            return removeNodeFromHost(this, refNode);\n          }\n\n          if (nodeType === 'root') {\n            return removeNodeFromRoot(this, refNode);\n          }\n        }\n      },\n      removeEventListener: {\n        value: function value(name, func, opts) {\n          if (name === 'slotchange' && this.____slotChangeListeners && isSlotNode(this)) {\n            this.____slotChangeListeners--;\n          }\n          return this.__removeEventListener(name, func, opts);\n        }\n      },\n      replaceChild: {\n        value: function value(newNode, refNode) {\n          this.insertBefore(newNode, refNode);\n          return this.removeChild(refNode);\n        }\n      },\n      shadowRoot: {\n        get: function get() {\n          return hostToModeMap.get(this) === 'open' ? hostToRootMap.get(this) : null;\n        }\n      },\n      textContent: {\n        get: function get() {\n          var textContent = '';\n          eachChildNode(this, function (node) {\n            textContent += node.textContent;\n          });\n          return textContent;\n        },\n        set: function set(textContent) {\n          while (this.hasChildNodes()) {\n            this.removeChild(this.firstChild);\n          }\n          this.appendChild(document.createTextNode(textContent));\n        }\n      }\n    };\n\n    function findDescriptorFor(name) {\n      for (var a = 0; a < protos.length; a++) {\n        var ctor = window[protos[a]];\n        if (!ctor) {\n          continue;\n        }\n        var proto = ctor.prototype;\n        if (proto.hasOwnProperty(name)) {\n          return Object.getOwnPropertyDescriptor(proto, name);\n        }\n      }\n    }\n\n    if (!('attachShadow' in document.createElement('div'))) {\n      (function () {\n        var elementProto = HTMLElement.prototype;\n        Object.keys(members).forEach(function (memberName) {\n          var memberProperty = members[memberName];\n\n          // All properties should be configurable.\n          memberProperty.configurable = true;\n\n          // Polyfill as much as we can and work around WebKit in other areas.\n          if (canPatchNativeAccessors || polyfilAtRuntime.indexOf(memberName) === -1) {\n            var nativeDescriptor = findDescriptorFor(memberName);\n            Object.defineProperty(elementProto, memberName, memberProperty);\n            if (nativeDescriptor && nativeDescriptor.configurable) {\n              Object.defineProperty(elementProto, '__' + memberName, nativeDescriptor);\n            }\n          }\n        });\n      })();\n    }\n\n\n\n    var api = Object.freeze({\n      default: version\n    });\n\n    var previousGlobal = window.skatejsNamedSlots;\n    version.noConflict = function noConflict() {\n      window.skatejsNamedSlots = previousGlobal;\n      return this;\n    };\n    window.skatejsNamedSlots = version;\n    for (var name in api) {\n      version[name] = api[name];\n    }\n    version.version = '0.1.4';\n\n    return version;\n\n}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":"/source/"}